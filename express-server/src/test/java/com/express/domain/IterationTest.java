package com.express.domain;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import org.junit.Before;import org.junit.Test;import org.unitils.UnitilsJUnit4;import static com.express.matcher.BeanMatchers.hasValidSettersAndGettersExcluding;import static com.express.matcher.BeanMatchers.usesPersistableEqualityStrategy;import static com.express.matcher.BeanMatchers.usesPersistableHashCodeStrategy;import static com.express.matcher.BeanMatchers.usesReflectionToStringBuilder;import static org.hamcrest.MatcherAssert.assertThat;import static org.hamcrest.Matchers.equalTo;public class IterationTest extends UnitilsJUnit4 {   private static final Log LOG = LogFactory.getLog(IterationTest.class);   Iteration iteration;   @Before   public void setUp() {      iteration = new Iteration();      LOG.info(iteration);   }      @Test   public void shouldSetAndGetProperties() {      assertThat(iteration, hasValidSettersAndGettersExcluding("equalityStrategy", "version"));   }   @Test   public void shouldBaseEqualityOnThePersistableEqualityStrategy() {      assertThat(iteration, usesPersistableEqualityStrategy());   }   @Test   public void shouldBaseHashCodeOnThePersistableEqualityStrategy() {      assertThat(iteration, usesPersistableHashCodeStrategy());   }   @Test   public void shouldUseReflectionToStringBuilder() {      assertThat(iteration, usesReflectionToStringBuilder());   }   @Test   public void shouldReturnCompletedPointsOnlyForStoriesWhichAreDone() {      BacklogItem story = new BacklogItem();      int effort = 10;      story.setEffort(effort);      iteration.addBacklogItem(story, false);      assertThat("completed story points", iteration.getStoryPointsCompleted(), equalTo(0));      story.setStatus(Status.DONE);      assertThat("completed story points", iteration.getStoryPointsCompleted(), equalTo(effort));   }   @Test   public void shouldReturnStoryPointsForAllStories() {      BacklogItem story = new BacklogItem();      int effort = 10;      story.setEffort(effort);      assertThat("story points before adding story", iteration.getStoryPoints(), equalTo(0));      iteration.addBacklogItem(story, false);      assertThat("story points after adding story", iteration.getStoryPoints(), equalTo(effort));   }}