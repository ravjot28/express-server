package com.express.domain;import junit.framework.Assert;import org.junit.Before;import org.junit.Test;import org.unitils.UnitilsJUnit4;import java.util.ArrayList;import java.util.List;import static com.express.matcher.BeanMatchers.hasValidSettersAndGettersExcluding;import static com.express.matcher.BeanMatchers.usesPersistableEqualityStrategy;import static com.express.matcher.BeanMatchers.usesPersistableHashCodeStrategy;import static com.express.matcher.BeanMatchers.usesReflectionToStringBuilder;import static org.hamcrest.MatcherAssert.assertThat;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertNotNull;public class UserTest extends UnitilsJUnit4 {   private User user;      @Before   public void setUp() {      user = new User();   }      @Test   public void shouldSetAndGetProperties() {      assertThat(user, hasValidSettersAndGettersExcluding("equalityStrategy", "version", "accessRequests"));   }   @Test   public void shouldBaseEqualityOnThePersistableEqualityStrategy() {      assertThat(user, usesPersistableEqualityStrategy());   }   @Test   public void shouldBaseHashCodeOnThePersistableEqualityStrategy() {      assertThat(user, usesPersistableHashCodeStrategy());   }   @Test   public void shouldUseReflectionToStringBuilder() {      assertThat(user, usesReflectionToStringBuilder());   }      @Test   public void checkConstructedProperly() {      assertEquals(user.isActive(), false);      assertNotNull(user.toString());   }      @Test   public void testAddRemoveAccessRequests() {      assertNotNull(user.getAccessRequests());      Assert.assertEquals(0, user.getAccessRequests().size());      AccessRequest request = new AccessRequest();      user.addAccessRequest(request);      Assert.assertEquals(1, user.getAccessRequests().size());      user.removeAccessRequest(request);      Assert.assertEquals(0, user.getAccessRequests().size());   }   @Test   public void testGetSetAccessRequest() {      List<AccessRequest> accessList = new ArrayList<AccessRequest>();      AccessRequest request = new AccessRequest();      accessList.add(request);      Assert.assertEquals(0, user.getAccessRequests().size());      user.setAccessRequests(accessList);      Assert.assertEquals(1, user.getAccessRequests().size());      Assert.assertEquals(request, user.getAccessRequests().get(0));   }   @Test   public void testGetUsername() {      String email = "test@test.com";      user.setEmail(email);      Assert.assertEquals(email, user.getUsername());   }}